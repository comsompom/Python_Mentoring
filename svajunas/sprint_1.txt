

09.12.24.
Sprint 1
Task 7
0. Create Separate repo on the GitHub Orion_Sprint_1
1. Leetcode - solve two simple problem and commit to github repo
2. Create the generator which should calculate the next number by the rule: num_next = (num_previous * 3) // 5.
   The teach materials about generators:
   a. https://wiki.python.org/moin/Generators
   b. https://www.geeksforgeeks.org/generators-in-python/
   c. https://realpython.com/introduction-to-python-generators/
3. Create the function that will show just n  elements which will be declared as variable from previous Generator
4. Create on the AWS Free account - Lambda Function which should calculate the Fubo sequence by receiving the user
   variable. In the Git repo create the Separate Folder in the Orion Sprint 1 named (AWS Projects) in this folder create the Readme.md 
   file with described:
   a. Lambda URL
   b. Payload to lambda
   c. Responce from Lambda
   d. Readme file should be done as document with Content, right described URL and full description
   e. check that lambda will not triger any paid resources

External teach materials:
https://www.linkedin.com/learning/learning-regular-expressions-15586553/write-text-matching-patterns?u=89254810
https://www.linkedin.com/learning/python-practice-collections/try-your-python-programming-skills?u=89254810

https://www.linkedin.com/learning/skill-up-with-python-hands-on-web-development-projects/skill-up-with-python-introduction?u=89254810

Bonus task:
https://www.linkedin.com/learning/monitoring-aws-with-cloudwatch-19882023/monitoring-cloud-performance-with-aws-cloudwatch?u=89254810
https://www.linkedin.com/learning/learning-docker-17236240/get-up-and-running-quick-with-docker?u=89254810
_____________________________________________________________________________________________________________
10.12.24
Sprint 1
Task 8
0. Solve Two simple tasks on the Leetcode and commit them to repo.
1. Create FastApi application for getting the stock prices:
   a. Create separate repo on the GitHub
   b. create Python separate virtual environment and install all dependencies library there (pandas, numpy, fastapi, yfinance)
   c. Create Fast api routes for:
      c.1. Get Stock Prices by send the payload (example): 
           {"msft": "daily"} - description {stock_name: period} - sgould return the json object: {stock_price: price}
      c.2. Get Stcock prices values (volume, average) - example: {stock_name: volume}, or example {stock_name: av_7}
           should return the payload {stock_name: num_var}.
           for averages return should be described like: av_{num} - where {num} - the number of the days for average the price
   d. Create video demo of local start and working the FastApi application
2. Create Docker Container with FastAPI stock application.
   a. Push the docker file to the FastAPI app repo.
   b. Docker container should be with minimum size and should include all python libraries and dependencies
   c. Docker container should start locally
3. In the FastAPI git repo create the Readme file with full descriprion of the app, the examples of using, examples of send
   and received payloads. Describe the process of running app locally without docker and inside docker.


Teach materials:
Docker:
https://www.linkedin.com/learning/docker-essential-training/diving-deeper-into-docker?contextUrn=urn%3Ali%3AlyndaLearningPath%3A5c804fb0498e77634527558a&u=89254810

GitLAb:
https://www.linkedin.com/learning/learning-gitlab-14539757/gitlab-version-control-and-more?u=89254810
_____________________________________________________________________________________________________________

11.12.24
Sprint 1
Task 9
0. Solve two simple tasks on the Leetcode and commit to git repo
1. Update the previous FastApi application for getting stocks:
   a. Create sqlite database
   b. In the sqlite db create table "requests" with fields: (time(datetime), stock(text), price(float), av_7(float), av_14(float), 
      av_21(float), daily_price(float), month_price(float))
   c. Create Singleton design pattern with connection to the sqlite db
   d. Each request from the user save to the sqlite db
   e. add new route "check_db_full" with the json response of the sqlite db table "requests"
   f. add new route "check_db_time/{time}" with json response of the sqlite table "requests" by user time (user time should be in the 
      Unix timestamp format)
2. Add own Exception catcher in which add the possibility to send to the user error responces in the json format by the standard HTTP 
   responces. For 4XX errors return the json with description of the 4xx error in which should be shortly described the error and the
   ways to solve it - example {"status": 404, "description": "requested route does not exist", "solve": "check the documentation for 
   routes {link to the documentation}"}. The same errors should be done for the the problems with db connection and problems with
   getting stocks from external APIs
3. Put the app to the Docker container with minimal size
4. Create video presentation. of the working app localy and in the docker container
5. Extend documentation with examples of using, how to install app, start app, use docker


Teach materials:
complete the course of the AWS Cloud Practitioner for getting the high level of the AWS resources:
https://www.linkedin.com/learning/paths/prepare-for-the-aws-certified-cloud-practitioner-clf-c02-certification?u=89254810
_____________________________________________________________________________________________________________

12.12.24
Sprint 1
Task 10
0. Solve two simple problems on the Leetcode and commit to git
1. Make investigation between MongoDB, SQlite DB and AWS Dynamo DB (do not code or create any thing) - just understand which
   DB will fit to the previous FastAPI more. Investigation describe in the same FastAPI Folder in the file "DB_investigation.md".
   Create the Confluence pages;
   a. with description of the project
   b. DB investigation
   c. extend the project Readme with the links to the confluence
2. Cover all previous FastAPI project with tests. Tests should cover not just lines of the code but the logic also. All requests as the 
   DB operation should be Mocked with fake results for test but cover the logic. Tests should not be copied to the Docker container 
   in the process of the Docker container creating.
3. Check the SonarCloud and create the free account. Add the project to the sonarcloud and check the project with sonar for 
   finding potential bugs. Extend the readme with sonar links
4. Create video presentation of the done job (Show tests coverage, sonar, confluence pages, docker build, start, start localy)

Teach materials:
https://www.linkedin.com/learning/level-up-advanced-sql/advanced-sql-code-challenges?u=89254810
https://www.linkedin.com/learning/level-up-sql/sql-code-challenges?u=89254810
_____________________________________________________________________________________________________________

13.12.24
Sprint 1
Task 11
0. Solve two simple problems on the Leetcode and push to repo
1. Create the checklist of all Sprint task and completre them
2. Done video presentation of the finished sprint
3. Describe the patterns Singleton, Fabric and Facade in video presentation

Teach materials:

https://www.linkedin.com/learning/monitoring-aws-with-cloudwatch-19882023/monitoring-cloud-performance-with-aws-cloudwatch?u=89254810
https://www.linkedin.com/learning/unit-testing-in-python/python-unit-testing-with-pytest?u=89254810
_____________________________________________________________________________________________________________
