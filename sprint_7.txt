20.01.25
Sprint 7
Task 33

0. Solve two simple problems on the leetcode and commit to the git repo
1. Check the materials bout (O) notation (big O):
   https://www.freecodecamp.org/news/big-o-notation-why-it-matters-and-why-it-doesnt-1674cfa8a23c/
   https://www.geeksforgeeks.org/analysis-algorithms-big-o-analysis/
   https://web.mit.edu/16.070/www/lecture/big_o.pdf
2. on the git repo: 
   https://github.com/Svajunas900/Leetcode_Problems
   for each already done task at the end of the task describe the Time complexity with big O notation like a documentation:
_____________________________________________________________________________________________________________
21.01.25
Sprint 7
Task 34

0. Solve two simple task on the leetcode and commit to the git. Use description with big O notation in the commits
1. Create simple own architecture scripts using design patterns: decorator, singleton, fa√ßade, fabric - all scripts should not 
   repeat previously done tasks
2. Check the AWS documentation and be familiar with services: API gateway, CloudWatch, DynamoDB, SQS, VPN. Based on the AWS official
   documentation create the FastAPI app which should grab this information from AWS using selenium and save it in the separate 
   txt files.
   2.1. Each File should be named as aws_{name of the service}.txt
   2.2. Using the decorator check the text in the files with not Unicode symbols and remove them. Each line should be no more than 70
        symbols. If sentence less then 70 symbols then leave it as it if more than 70 symbols then split them to two or more lines.
   2.3. Using singleton create the SQLite db connection and save the short description of each txt file in to the db
_____________________________________________________________________________________________________________
22.01.25
Sprint 7
Task 35

0. Solve two simple problems on the leetcode and commit to the git repo, add description with big O notation
1. Create simple AWS lambda which will request any url that user send as parameter and return the response.text to the user.
2. Cover the lambda code with unit tests
3. Create the Terraform scripts for deploy the lambda
4. On the git create the CI/CD with two branches: dev and prod. 
   4.1. The dev branch could be commited any user and CI/CD on the dev branch
         should start the unit tests and using the terraform deploy the lambda.
   4.2. the prod branch should be protected and to the prod branch possible just merging from the dev branch only with two user
        approvals. On the prod branch CI/CD should run the unit tests and deploy the lambda with terraform. Results of the deploying
        should be returned in the output with the uri of the lambda
_____________________________________________________________________________________________________________
23.01.25
Sprint 7
Task 36

Teach materials:
1. https://realpython.com/python-gil/
2. https://www.geeksforgeeks.org/multiprocessing-python-set-1/
3. https://www.geeksforgeeks.org/multithreading-python-set-1/
4. https://www.youtube.com/watch?v=STEOavXqXkQ
5. https://wiki.python.org/moin/UsingSlots
6. https://www.geeksforgeeks.org/classmethod-in-python/

Practice:
0. solve two simple leetcode task with describe big O and commit them
1. Create the repo "class_examples". in this repo:
   a. Create simple class with using "slots"
   b. Create simple class with @classmethod and @staticmethod. Create the readme with describing what classmethod and staticmethod
      are doing.
   c. create self understanding doc with describe the GIL, the difference between multiprocessing and multithreading
2. Create FasAPI app for calculating the average profit of stocktrading using the staticmethod for calculation
3. see the course:
   https://www.linkedin.com/learning/build-rest-apis-with-fastapi/what-is-fastapi?u=89254810
_____________________________________________________________________________________________________________
