03.03.25
Sprint 9
Task 43

0. Solve two simple problems on the leetcode and commit them to the git repo
1. Refactor repositories with typing (https://docs.python.org/3/library/typing.html):
   1.1. https://github.com/Svajunas900/Regular_expressions/tree/main
        https://github.com/Svajunas900/generators_examples
        https://github.com/Svajunas900/class_examples/tree/main
        https://github.com/Svajunas900/FastAPI_Stocks/blob/main
        https://github.com/Svajunas900/cross_web_solution/tree/main

2. For the previous FastAPI projects add interactive API Docs using Swagger UI (https://fastapi.tiangolo.com/#interactive-api-docs):
   2.1. https://github.com/Svajunas900/generators_examples
        https://github.com/Svajunas900/FastAPI_Stocks/blob/main
        https://github.com/Svajunas900/Regular_expressions/blob/main
        https://github.com/Svajunas900/cross_web_solution/tree/main
   2.2. Create presentation of the Swagger UI working process

3. Add security OAuth to the FastAPI (https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#oauth2passwordrequestform):
   3.1. https://github.com/Svajunas900/FastAPI_Stocks/blob/main
        https://github.com/Svajunas900/cross_web_solution/tree/main
_____________________________________________________________________________________________________________
04.02.25
Sprint 9
Task 44

0. Solve two simple leetcode problems and commit them to git repo
1. Check the cources:
   https://www.linkedin.com/learning/advanced-python-working-with-databases-22307421/using-databases-to-level-up-your-python-applications?u=89254810
   https://www.linkedin.com/learning/advanced-python-practical-database-examples/use-databases-to-level-up-your-python-applications?u=89254810
2. Check the SQLAlchemy documentation: https://www.sqlalchemy.org/
3. Refactor the repo (add the sqlalchemy_prj  branch) for using with the sqlalchemy framework:
   https://github.com/Svajunas900/Context_managers
   3.1. in the database create the tables:
        a. user login (id, date, time, username)
        b. user requests (id, username, request(url), response(should be short description, date, time))
   3.2. add the readme file with description how to use the project, how to start the project, how to use local version, docker version
4. refactor the repo:
   https://github.com/Svajunas900/generators_examples
   4.1. add authorization url with oauth bearer token
   4.2. requests could be done just authorised users
   4.3. add sqlalchemy framework and database with tables:
        a. user_request (id, username, gen_request, gen_response, date, time)
        b. auth_logs (id, date, time, authorised/not authorised)
_____________________________________________________________________________________________________________
05.02.25
Sprint 9
Task 45

0. Solve two simple leetcode problems and commit to the git repo
1. Using the FastAPI create the app which:
   1.1. Create separate repo in the Git: news_finder
   1.2. Using the selenium grab the headers of the news from: https://edition.cnn.com/
        to the sqlite database to the table: news_flow (id, date, time, header_news). Should be realised using:
        a. Each news header should not be more then 200 characters.
        b. Singleton for connection to the db
        c. sqlalchemy for managing the db
   1.3. Use this grabbing periodicaly with using the Celery
   1.4. User could send the request to the app in the format: {"date": "string_date_time", "news_num": "number_of_of_the_headers_news"}
   1.5. Connection to the FastApi should be done for two groups of the users: authorised and not_authorised.
        a. NOT Authorised users could get just 5 headers of the news for two days.
        b. Authorised users could be splitted to categories: payble, free:
           b.1 payble could grab the news with unlimit requests
           b.2. free could request 10 days with no more then 20 headers for ech day
   1.6. Each user login should be logged to the db log table
   1.7. if the user sends more requests then it could be in this case the response should describe that user could not grab for today more
        news and user should recieve the short instruction how to change their category
   1.8. the app should check the requests from users with their ip address. If there is more then 10 requests from the same IP by the 5
        minutes then user should recieve the response that he should wait 5 minutes
   1.9. The app should be covered with unit tests
   1.10. The app should have the CI/CD pipeline which will execute the tests on each commit on the dev branch. and no test execution on the 
         prod branch
   1.11. The app should be described in the readme on the prod and on the dev. On the dev the app should have the description of how to use
         the local and Docker. On the prod the readme should contain the information about user restrictions and categories.
   1.12. the app should be verified with sonarcloud
_____________________________________________________________________________________________________________
06.02.25
Sprint 9
Task 46

0. Solve two simple task on the leetcode and commit it to the git
1. learn the courses about AWS architecture:
   https://www.linkedin.com/learning/aws-certified-solutions-architect-associate-saa-c03-cert-prep-1-cloud-services-overview/aws-solutions-architect-associate?contextUrn=urn%3Ali%3AlyndaLearningPath%3A6452b7ae498ee2eccf043926&u=89254810
   https://www.linkedin.com/learning/aws-certified-solutions-architect-associate-saa-c03-cert-prep-2-storage-design/storage-services?contextUrn=urn%3Ali%3AlyndaLearningPath%3A6452b7ae498ee2eccf043926&u=89254810
   https://www.linkedin.com/learning/aws-certified-solutions-architect-associate-saa-c03-cert-prep-3-virtual-private-cloud/virtual-private-cloud-vpc-overview?contextUrn=urn%3Ali%3AlyndaLearningPath%3A6452b7ae498ee2eccf043926&u=89254810

_____________________________________________________________________________________________________________
