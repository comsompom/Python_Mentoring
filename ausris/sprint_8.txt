26.05.25
Sprint 8
Task 38

1. Solve two simple problems on the leetcode and commit them to repo
2. Check the materials about class functions help, dir, issubclass, len
   https://www.programiz.com/python-programming/methods/built-in/help
   https://www.programiz.com/python-programming/methods/built-in/issubclass
   https://www.programiz.com/python-programming/methods/built-in/len
   https://www.w3schools.com/python/ref_func_dir.asp
3. Check the course Regular expressions:
   https://www.linkedin.com/learning/learning-regular-expressions-15586553/write-text-matching-patterns?u=89254810
4. Create on the Git separate repo "regular_expressions" in the repo dir: https://github.com/ausrys/00_Start_Orion.
   on this repo create the FastAPI app which:
   a. get the URL and search string from the user in the json format,
   b. using selenium grab the text
   c. save the text to the file, delete all none Unicode symbols
   d. using the regular expressions search the user search string and send to the user the response with found information. If requested 
      info is not found then Own Exception should be generated. Own exception should be done in own exception class. Exception should
      return to the user the error code (depends of the exception) and the explanation
5. All code should be covered with unit tests, which should be executed automatically on the Git CI/CD on  the each commit.

________________________________________________________________________________________________________

27.05.25
Sprint 8
Task 39

1. solve two simple problems on the leetcode and commit them to git repo.
2. Based on the previous Django competition solution create:
   2.1 Flask application for creating blog on the Django site:
       a. Flask app should be accessible with the same admin credentials as Django admin
       b. Flask app should have easy interface for create text, add images and save them to the template files inside 
          Django app.
       c. Django app should recognise that templates and show them on the pages after the flask app will create or renew some
          text or image app.
       d. Flask app should have possibility to get the text files (txt or csv) and transfer them to the Django postgreDb
       e. all code should be covered with tests
       f. flask app should work local and from docker
________________________________________________________________________________________________________
28.05.25
Sprint 8
Task 40

1. Solve two simple problems on the leetcode and commit them to the git repo
2. Check and learn tech materials:
   2.1. the EXPLAIN command in the PostgreDB:
   	https://www.postgresql.org/docs/current/sql-explain.html
   2.2. Database locks:
        https://medium.com/inspiredbrilliance/what-are-database-locks-1aff9117c290
   2.3. Locks in the PostgreDB:
        https://medium.com/@hnasr/postgres-locks-a-deep-dive-9fc158a5641c
   2.4. Cookies in the websites:
        https://www.cloudflare.com/en-gb/learning/privacy/what-are-cookies/
   2.5. HTTP Methods (understand and explain the difference between GET and POST):
        http://www.w3schools.com/Tags/ref_httpmethods.asp
   2.6. Understand and explain git cherry-pick:
        https://git-scm.com/docs/git-cherry-pick
   2.7. Python Abstract class. Realisation and usage:
        https://www.geeksforgeeks.org/abstract-classes-in-python/
   2.8. Understand and explain the RESTFull API:
        https://aws.amazon.com/what-is/restful-api/

________________________________________________________________________________________________________

29.05.25
Sprint 8 
Task 41

0. Solve two simple leetcode problems and commit to the git repo
1. Using the FastAPI create the app which:
   1.1. Create separate repo in the Git: news_finder
   1.2. Using the selenium grab the headers of the news from: https://edition.cnn.com/
        to the sqlite database to the table: news_flow (id, date, time, header_news). Should be realised using:
        a. Each news header should not be more then 200 characters.
        b. Singleton for connection to the db
        c. sqlalchemy for managing the db
   1.3. Use this grabbing periodicaly with using the Celery
   1.4. User could send the request to the app in the format: {"date": "string_date_time", "news_num": "number_of_of_the_headers_news"}
   1.5. Connection to the FastApi should be done for two groups of the users: authorised and not_authorised.
        a. NOT Authorised users could get just 5 headers of the news for two days.
        b. Authorised users could be splitted to categories: payable, free:
           b.1 payble could grab the news with unlimit requests
           b.2. free could request 10 days with no more then 20 headers for each day
   1.6. Each user login should be logged to the db log table
   1.7. if the user sends more requests then it could be in this case the response should describe that user could not grab for today more
        news and user should recieve the short instruction how to change their category
   1.8. the app should check the requests from users with their ip address. If there is more then 10 requests from the same IP by the 5
        minutes then user should recieve the response that he should wait 5 minutes
   1.9. The app should be covered with unit tests
   1.10. The app should have the CI/CD pipeline which will execute the tests on each commit on the dev branch. and no test execution on the 
         prod branch
   1.11. The app should be described in the readme on the prod and on the dev. On the dev the app should have the description of how to use
         the local and Docker. On the prod the readme should contain the information about user restrictions and categories.
   1.12. the app should be verified with sonarcloud
___________________________________________________
