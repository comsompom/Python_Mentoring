Board for the project
https://github.com/users/comsompom/projects/2
________________________________________________________________________________________________________
Sprint 1
Task 5
07.04.25

1. Leetcode - solve two simple problem and commit to github repo
2. Create class DBSingleton - with singleton pattern implementation of connecting to the sqlite db
3. Create class RouteFactory - with implementation of the factory pattern for generating different URL which
   depends of the user input
4. Create class RateFacade - with Facade pattern implementation of returning 3 different JSON objects

Python:
https://www.linkedin.com/learning/python-design-patterns-14304845?u=89254810
https://refactoring.guru/design-patterns/python
https://python-patterns.guide/

Flask:
https://www.linkedin.com/learning/building-restful-apis-with-flask?u=89254810
https://flask.palletsprojects.com/en/stable/

AWS:
https://aws.amazon.com/en/sqs/
https://aws.amazon.com/en/sqs/details/
https://aws.amazon.com/en/sqs/pricing/
https://aws.amazon.com/en/s3/
________________________________________________________________________________________________________
Sprint 1 
Task 6
08.04.25

1. Leetcode - solve two simple problem and commit to git repo
2. Create new repo "Check_Flask". Create simple Flask application with two routes: "simple" "odd"
3. Route simple should return the Fibo number which user send to this route with GET operation.
   Example: ....../simple/5 should return the JSON object on the screen with params:
   {"user number": 5,
    "Fibo Result": 5}
4. Route 'odd' should receive the user params with GET operation and return JSON object with the explanation
   that the return number in the ODD sequence or not:
   {"user number": 5,
    "result": if odd - "in sequence", if not odd "not in sequence"}

5. Application should work locally. Create Video presentation of how the application is working

________________________________________________________________________________________________________
09.04.25
Sprint 1 
Task 7

1. Leetcode - solve two simple problem and commit to github repo
2. Create the generator which should calculate the next number by the rule: num_next = (num_previous * 3) // 5.
   The teach materials about generators:
   a. https://wiki.python.org/moin/Generators
   b. https://www.geeksforgeeks.org/generators-in-python/
   c. https://realpython.com/introduction-to-python-generators/
3. Create the function that will show just n  elements which will be declared as variable from previous Generator
4. Create on the AWS Free account - Lambda Function which should calculate the Fubo sequence by receiving the user
   variable. In the Git repo https://github.com/ausrys/AWS_Examples in this folder create the Readme.md 
   file with described:
   a. Lambda URL
   b. Payload to lambda
   c. Responce from Lambda
   d. Readme file should be done as document with Content, right described URL and full description
   e. check that lambda will not triger any paid resources
________________________________________________________________________________________________________

10.04.25
Sprint 1
Task 8

0. Solve Two simple tasks on the Leetcode and commit them to repo.
1. Create FastApi application for getting the stock prices:
   a. Create separate repo on the GitHub inside this repo: https://github.com/ausrys/FastAPI_Examples
   b. create Python separate virtual environment and install all dependencies library there (pandas, numpy, fastapi, yfinance)
   c. Create Fast api routes for:
      c.1. Get Stock Prices by send the payload (example): 
           {"msft": "daily"} - description {stock_name: period} - sgould return the json object: {stock_price: price}
      c.2. Get Stcock prices values (volume, average) - example: {stock_name: volume}, or example {stock_name: av_7}
           should return the payload {stock_name: num_var}.
           for averages return should be described like: av_{num} - where {num} - the number of the days for average the price
   d. Create video demo of local start and working the FastApi application
2. Create Docker Container with FastAPI stock application.
   a. Push the docker file to the FastAPI app repo.
   b. Docker container should be with minimum size and should include all python libraries and dependencies
   c. Docker container should start locally
3. In the FastAPI git repo create the Readme file with full descriprion of the app, the examples of using, examples of send
   and received payloads. Describe the process of running app locally without docker and inside docker.
________________________________________________________________________________________________________
