09.06.25
Sprint 10
Task 48

1. Solve two simple task on the leetcode and commit it to the git
2. Check the learn materials about Unit Testing
   https://www.linkedin.com/learning/unit-testing-and-test-driven-development-in-python/welcome?u=89254810
   https://www.linkedin.com/learning/visual-studio-deep-dive-unit-tests/test-your-code-in-visual-studio?u=89254810
   https://www.linkedin.com/learning/software-testing-tools/making-the-right-software-testing-choice?u=89254810

________________________________________________________________________________________________________
10.06.25
Sprint 10
Task 49

1. Solve two simple leetcode problems and commit them to git repo
2. Learn Linux Bash 
   https://www.linkedin.com/learning/learning-bash-scripting-17063287/learning-bash-scripting?u=89254810
   https://www.linkedin.com/learning/learning-linux-command-line-14447912/learning-linux-command-line?u=89254810
3. Learn about Python testing
   https://www.linkedin.com/learning/test-automation-with-python-3-testing-web-and-mobile/the-landscape-of-web-testing-tools?u=89254810
   https://www.linkedin.com/learning/python-automation-and-testing/welcome?u=89254810
________________________________________________________________________________________________________
11.06.25
Sprint 10
Task 50

1. Solve two simple leetcode problems and commit them to git repo
2. Create separate repo: "knowledge_check"
   2.1. In this repo create the create the Flask app:
        a. App should have the login page (email, password)
        b. should be connected the SQLite db using the singleton
        c. should log the user (login, time spend, activity)
   2.2. App should have the One page (route) "qulification". On which should dynamically appear 40 questions about python language.
        a. Each question shouldhave at least 4 options to answer. The answers should be multichecked, but only one answer should be correct.
        b. all questions and answers should be in the database.
        c. all user answers should be saved to the database.
   2.3. App should have the own timer for 45 minutes. When time is off the test should calculate the result. Right result should be the answers
        for at least 80% (32 right answers)
   2.4. App should run local and from the docker.
   2.5. All logic of the app should be covered by unit tests
   2.6. App should have own CI/CD on the git with auto checking each commit and auto run the unit tests
   2.7. The questions for the app should covere the Python language concepts which was learned during the studying
________________________________________________________________________________________________________
